/* The following code was generated by JFlex 1.4.3 on 14.03.14 16:28 */

package g2html;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14.03.14 16:28 from the specification file
 * <tt>CTokens.flex</tt>
 */
public final class CTokens {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int STRING = 2;
  private static final int YYINITIAL = 0;
  private static final int COMMENT = 6;
  private static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\2\1\0\1\3\1\1\16\5\4\0\1\3\1\63"+
    "\1\76\1\17\1\4\1\75\1\67\1\77\1\52\1\53\1\72\1\71"+
    "\1\61\1\16\1\14\1\73\1\6\11\7\1\66\1\60\1\27\1\62"+
    "\1\30\1\65\1\0\4\12\1\15\1\13\5\4\1\10\13\4\1\11"+
    "\2\4\1\56\1\0\1\57\1\74\1\4\1\0\1\31\1\36\1\22"+
    "\1\25\1\26\1\42\1\44\1\41\1\20\1\4\1\40\1\23\1\33"+
    "\1\21\1\35\1\50\1\4\1\37\1\32\1\34\1\24\1\51\1\46"+
    "\1\43\1\47\1\45\1\54\1\70\1\55\1\64\41\5\2\0\4\4"+
    "\4\0\1\4\2\0\1\5\7\0\1\4\4\0\1\4\5\0\27\4"+
    "\1\0\37\4\1\0\u01ca\4\4\0\14\4\16\0\5\4\7\0\1\4"+
    "\1\0\1\4\21\0\160\5\5\4\1\0\2\4\2\0\4\4\10\0"+
    "\1\4\1\0\3\4\1\0\1\4\1\0\24\4\1\0\123\4\1\0"+
    "\213\4\1\0\5\5\2\0\236\4\11\0\46\4\2\0\1\4\7\0"+
    "\47\4\11\0\55\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0"+
    "\1\5\10\0\33\4\5\0\3\4\15\0\4\5\7\0\1\4\4\0"+
    "\13\5\5\0\53\4\37\5\4\0\2\4\1\5\143\4\1\0\1\4"+
    "\10\5\1\0\6\5\2\4\2\5\1\0\4\5\2\4\12\5\3\4"+
    "\2\0\1\4\17\0\1\5\1\4\1\5\36\4\33\5\2\0\131\4"+
    "\13\5\1\4\16\0\12\5\41\4\11\5\2\4\4\0\1\4\5\0"+
    "\26\4\4\5\1\4\11\5\1\4\3\5\1\4\5\5\22\0\31\4"+
    "\3\5\244\0\4\5\66\4\3\5\1\4\22\5\1\4\7\5\12\4"+
    "\2\5\2\0\12\5\1\0\7\4\1\0\7\4\1\0\3\5\1\0"+
    "\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0"+
    "\4\4\2\0\1\5\1\4\7\5\2\0\2\5\2\0\3\5\1\4"+
    "\10\0\1\5\4\0\2\4\1\0\3\4\2\5\2\0\12\5\4\4"+
    "\7\0\1\4\5\0\3\5\1\0\6\4\4\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\2\4\1\0\2\4\1\0\2\4\2\0\1\5"+
    "\1\0\5\5\4\0\2\5\2\0\3\5\3\0\1\5\7\0\4\4"+
    "\1\0\1\4\7\0\14\5\3\4\1\5\13\0\3\5\1\0\11\4"+
    "\1\0\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4"+
    "\2\0\1\5\1\4\10\5\1\0\3\5\1\0\3\5\2\0\1\4"+
    "\17\0\2\4\2\5\2\0\12\5\1\0\1\4\17\0\3\5\1\0"+
    "\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\5\4\2\0\1\5\1\4\7\5\2\0\2\5\2\0\3\5\10\0"+
    "\2\5\4\0\2\4\1\0\3\4\2\5\2\0\12\5\1\0\1\4"+
    "\20\0\1\5\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0"+
    "\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0"+
    "\14\4\4\0\5\5\3\0\3\5\1\0\4\5\2\0\1\4\6\0"+
    "\1\5\16\0\12\5\11\0\1\4\7\0\3\5\1\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4\7\5"+
    "\1\0\3\5\1\0\4\5\7\0\2\5\1\0\2\4\6\0\2\4"+
    "\2\5\2\0\12\5\22\0\2\5\1\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\12\4\1\0\5\4\2\0\1\5\1\4\7\5\1\0"+
    "\3\5\1\0\4\5\7\0\2\5\7\0\1\4\1\0\2\4\2\5"+
    "\2\0\12\5\1\0\2\4\17\0\2\5\1\0\10\4\1\0\3\4"+
    "\1\0\51\4\2\0\1\4\7\5\1\0\3\5\1\0\4\5\1\4"+
    "\10\0\1\5\10\0\2\4\2\5\2\0\12\5\12\0\6\4\2\0"+
    "\2\5\1\0\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0"+
    "\7\4\3\0\1\5\4\0\6\5\1\0\1\5\1\0\10\5\22\0"+
    "\2\5\15\0\60\4\1\5\2\4\7\5\4\0\10\4\10\5\1\0"+
    "\12\5\47\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0"+
    "\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\0\4\4\1\5\2\4\6\5\1\0\2\5"+
    "\1\4\2\0\5\4\1\0\1\4\1\0\6\5\2\0\12\5\2\0"+
    "\2\4\42\0\1\4\27\0\2\5\6\0\12\5\13\0\1\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\10\4\1\0\44\4\4\0\24\5"+
    "\1\0\2\5\5\4\13\5\1\0\44\5\11\0\1\5\71\0\53\4"+
    "\24\5\1\4\12\5\6\0\6\4\4\5\4\4\3\5\1\4\3\5"+
    "\2\4\7\5\3\4\4\5\15\4\14\5\1\4\17\5\2\0\46\4"+
    "\12\0\53\4\1\0\1\4\3\0\u0149\4\1\0\4\4\2\0\7\4"+
    "\1\0\1\4\1\0\4\4\2\0\51\4\1\0\4\4\2\0\41\4"+
    "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\17\4"+
    "\1\0\71\4\1\0\4\4\2\0\103\4\2\0\3\5\40\0\20\4"+
    "\20\0\125\4\14\0\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4"+
    "\3\0\3\4\17\0\15\4\1\0\4\4\3\5\13\0\22\4\3\5"+
    "\13\0\22\4\2\5\14\0\15\4\1\0\3\4\1\0\2\5\14\0"+
    "\64\4\40\5\3\0\1\4\3\0\2\4\1\5\2\0\12\5\41\0"+
    "\3\5\2\0\12\5\6\0\130\4\10\0\51\4\1\5\1\4\5\0"+
    "\106\4\12\0\35\4\3\0\14\5\4\0\14\5\12\0\12\5\36\4"+
    "\2\0\5\4\13\0\54\4\4\0\21\5\7\4\2\5\6\0\12\5"+
    "\46\0\27\4\5\5\4\0\65\4\12\5\1\0\35\5\2\0\13\5"+
    "\6\0\12\5\15\0\1\4\130\0\5\5\57\4\21\5\7\4\4\0"+
    "\12\5\21\0\11\5\14\0\3\5\36\4\12\5\3\0\2\4\12\5"+
    "\6\0\46\4\16\5\14\0\44\4\24\5\10\0\12\5\3\0\3\4"+
    "\12\5\44\4\122\0\3\5\1\0\25\5\4\4\1\5\4\4\1\5"+
    "\15\0\300\4\47\5\25\0\4\5\u0116\4\2\0\6\4\2\0\46\4"+
    "\2\0\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\37\4\2\0\65\4\1\0\7\4\1\0\1\4\3\0\3\4"+
    "\1\0\7\4\3\0\4\4\2\0\6\4\4\0\15\4\5\0\3\4"+
    "\1\0\7\4\16\0\5\5\32\0\5\5\20\0\2\4\23\0\1\4"+
    "\13\0\5\5\5\0\6\5\1\0\1\4\15\0\1\4\20\0\15\4"+
    "\3\0\32\4\26\0\15\5\4\0\1\5\3\0\14\5\21\0\1\4"+
    "\4\0\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\4\4\1\0\13\4\2\0\4\4"+
    "\5\0\5\4\4\0\1\4\21\0\51\4\u0a77\0\57\4\1\0\57\4"+
    "\1\0\205\4\6\0\4\4\3\5\16\0\46\4\12\0\66\4\11\0"+
    "\1\4\17\0\1\5\27\4\11\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\40\5\57\0\1\4\u01d5\0\3\4\31\0\11\4\6\5\1\0"+
    "\5\4\2\0\5\4\4\0\126\4\2\0\2\5\2\0\3\4\1\0"+
    "\132\4\1\0\4\4\5\0\51\4\3\0\136\4\21\0\33\4\65\0"+
    "\20\4\u0200\0\u19b6\4\112\0\u51cc\4\64\0\u048d\4\103\0\56\4\2\0"+
    "\u010d\4\3\0\20\4\12\5\2\4\24\0\57\4\1\5\14\0\2\5"+
    "\1\0\31\4\10\0\120\4\2\5\45\0\11\4\2\0\147\4\2\0"+
    "\4\4\1\0\2\4\16\0\12\4\120\0\10\4\1\5\3\4\1\5"+
    "\4\4\1\5\27\4\5\5\20\0\1\4\7\0\64\4\14\0\2\5"+
    "\62\4\21\5\13\0\12\5\6\0\22\5\6\4\3\0\1\4\4\0"+
    "\12\5\34\4\10\5\2\0\27\4\15\5\14\0\35\4\3\0\4\5"+
    "\57\4\16\5\16\0\1\4\12\5\46\0\51\4\16\5\11\0\3\4"+
    "\1\5\10\4\2\5\2\0\12\5\6\0\27\4\3\0\1\4\1\5"+
    "\4\0\60\4\1\5\1\4\3\5\2\4\2\5\5\4\2\5\1\4"+
    "\1\5\1\4\30\0\3\4\43\0\6\4\2\0\6\4\2\0\6\4"+
    "\11\0\7\4\1\0\7\4\221\0\43\4\10\5\1\0\2\5\2\0"+
    "\12\5\6\0\u2ba4\4\14\0\27\4\4\0\61\4\u2104\0\u012e\4\2\0"+
    "\76\4\2\0\152\4\46\0\7\4\14\0\5\4\5\0\1\4\1\5"+
    "\12\4\1\0\15\4\1\0\5\4\1\0\1\4\1\0\2\4\1\0"+
    "\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0"+
    "\15\4\3\0\20\5\20\0\7\5\14\0\2\4\30\0\3\4\31\0"+
    "\1\4\6\0\5\4\1\0\207\4\2\0\1\5\4\0\1\4\13\0"+
    "\12\5\7\0\32\4\4\0\1\4\1\0\32\4\13\0\131\4\3\0"+
    "\6\4\2\0\6\4\2\0\6\4\2\0\3\4\3\0\2\4\3\0"+
    "\2\4\22\0\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\1\1\2\2\3\1\4\1\2"+
    "\2\5\1\6\1\7\7\2\1\10\1\11\11\2\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\2\1\1\2\37\1\40"+
    "\1\1\2\41\1\2\2\5\1\0\1\5\1\0\1\42"+
    "\1\43\2\44\1\2\1\45\6\2\1\46\3\2\1\47"+
    "\1\50\1\51\1\52\16\2\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\0\1\1\1\71\3\5\1\0\1\44"+
    "\1\72\13\2\1\73\1\74\1\75\1\2\1\76\13\2"+
    "\1\77\4\2\1\100\1\5\1\44\1\101\2\2\1\102"+
    "\1\103\4\2\1\104\1\105\1\2\1\106\13\2\1\107"+
    "\1\2\1\110\1\2\1\5\1\44\1\111\1\2\1\112"+
    "\10\2\1\113\2\2\1\114\2\2\1\115\1\116\1\2"+
    "\1\5\1\44\3\2\1\117\1\120\1\121\1\122\1\123"+
    "\1\124\1\125\1\2\1\126\2\2\1\5\1\44\2\2"+
    "\1\127\1\130\2\2\1\5\1\44\1\131\1\132\1\133"+
    "\1\134\1\5\1\0\1\5\4\0\1\44\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0100\0\u0180"+
    "\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380"+
    "\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580"+
    "\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0100"+
    "\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0780"+
    "\0\u07c0\0\u0100\0\u0100\0\u0100\0\u0800\0\u0840\0\u0880\0\u08c0"+
    "\0\u0900\0\u0940\0\u0980\0\u0100\0\u09c0\0\u0a00\0\u0a40\0\u0100"+
    "\0\u0100\0\u0a80\0\u0ac0\0\u0100\0\u0b00\0\u0b40\0\u0100\0\u0b80"+
    "\0\u0bc0\0\u0c00\0\u0100\0\u0100\0\u0c40\0\u0c80\0\u0cc0\0\u01c0"+
    "\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0"+
    "\0\u0f00\0\u0f40\0\u0f80\0\u0100\0\u0fc0\0\u0100\0\u1000\0\u1040"+
    "\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240"+
    "\0\u1280\0\u12c0\0\u1300\0\u1340\0\u0100\0\u0100\0\u0100\0\u0100"+
    "\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u0100\0\u1380"+
    "\0\u0100\0\u0100\0\u13c0\0\u0100\0\u0100\0\u1400\0\u1440\0\u1480"+
    "\0\u14c0\0\u1500\0\u01c0\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640"+
    "\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u0100\0\u0100"+
    "\0\u0100\0\u1800\0\u01c0\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940"+
    "\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u01c0\0\u1b00"+
    "\0\u1b40\0\u1b80\0\u1bc0\0\u0100\0\u1c00\0\u1c40\0\u01c0\0\u1c80"+
    "\0\u1cc0\0\u01c0\0\u01c0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u01c0"+
    "\0\u01c0\0\u1e00\0\u01c0\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40"+
    "\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u01c0\0\u2100"+
    "\0\u01c0\0\u2140\0\u2180\0\u21c0\0\u01c0\0\u2200\0\u01c0\0\u2240"+
    "\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u01c0"+
    "\0\u2440\0\u2480\0\u01c0\0\u24c0\0\u2500\0\u01c0\0\u01c0\0\u2540"+
    "\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680\0\u01c0\0\u01c0\0\u01c0"+
    "\0\u01c0\0\u01c0\0\u01c0\0\u01c0\0\u26c0\0\u01c0\0\u2700\0\u2740"+
    "\0\u2780\0\u27c0\0\u2800\0\u2840\0\u01c0\0\u01c0\0\u2880\0\u28c0"+
    "\0\u2900\0\u2940\0\u01c0\0\u01c0\0\u01c0\0\u01c0\0\u2980\0\u29c0"+
    "\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u0100\0\u2b40\0\u2b80"+
    "\0\u2bc0\0\u2c00\0\u2c40\0\u2c80";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\4\11\1\14\1\11\1\15\1\16\1\17\1\11\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\11\1\31\1\11\1\32\1\33\2\11\1\34\1\11"+
    "\1\35\1\11\1\36\2\11\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\73\66\1\71"+
    "\1\66\1\5\2\0\75\5\1\72\1\73\1\74\67\72"+
    "\1\75\5\72\102\0\1\7\100\0\1\10\100\0\10\11"+
    "\1\0\1\11\2\0\7\11\2\0\21\11\34\0\2\76"+
    "\1\77\1\100\1\0\1\77\1\101\1\102\5\0\1\77"+
    "\2\0\1\102\13\0\1\77\1\100\42\0\2\13\1\77"+
    "\2\0\1\77\1\101\1\102\5\0\1\77\2\0\1\102"+
    "\13\0\1\77\43\0\2\101\106\0\1\103\43\0\1\104"+
    "\21\0\1\105\3\0\4\105\1\0\1\105\2\0\1\106"+
    "\6\105\2\0\21\105\32\0\10\11\1\0\1\11\2\0"+
    "\1\11\1\107\5\11\2\0\11\11\1\110\7\11\32\0"+
    "\10\11\1\0\1\11\2\0\7\11\2\0\1\111\3\11"+
    "\1\112\3\11\1\113\10\11\32\0\10\11\1\0\1\11"+
    "\2\0\7\11\2\0\4\11\1\114\14\11\32\0\10\11"+
    "\1\0\1\11\2\0\1\11\1\115\5\11\2\0\21\11"+
    "\32\0\10\11\1\0\1\11\2\0\6\11\1\116\2\0"+
    "\4\11\1\117\14\11\32\0\10\11\1\0\1\11\2\0"+
    "\1\11\1\120\1\11\1\121\3\11\2\0\12\11\1\122"+
    "\6\11\55\0\1\123\32\0\1\124\45\0\1\125\31\0"+
    "\1\126\21\0\10\11\1\0\1\11\2\0\4\11\1\127"+
    "\2\11\2\0\1\11\1\130\17\11\32\0\10\11\1\0"+
    "\1\11\2\0\1\131\6\11\2\0\3\11\1\132\4\11"+
    "\1\133\4\11\1\134\3\11\32\0\10\11\1\0\1\11"+
    "\2\0\7\11\2\0\16\11\1\135\2\11\32\0\10\11"+
    "\1\0\1\11\2\0\7\11\2\0\6\11\1\136\12\11"+
    "\32\0\10\11\1\0\1\11\2\0\6\11\1\137\2\0"+
    "\21\11\32\0\10\11\1\0\1\11\2\0\3\11\1\140"+
    "\3\11\2\0\4\11\1\141\14\11\32\0\10\11\1\0"+
    "\1\11\2\0\7\11\2\0\4\11\1\142\14\11\32\0"+
    "\10\11\1\0\1\11\2\0\7\11\2\0\10\11\1\143"+
    "\10\11\32\0\10\11\1\0\1\11\2\0\7\11\2\0"+
    "\4\11\1\144\14\11\110\0\1\145\77\0\1\146\77\0"+
    "\1\147\4\0\1\150\72\0\1\151\5\0\1\152\71\0"+
    "\1\153\6\0\1\154\70\0\1\155\77\0\1\156\7\0"+
    "\1\157\1\160\66\0\1\161\77\0\1\162\15\0\77\163"+
    "\1\0\1\66\2\0\73\66\1\0\1\66\2\0\1\70"+
    "\75\0\1\72\2\0\67\72\1\0\5\72\2\0\1\74"+
    "\75\0\73\164\1\165\4\164\6\0\2\76\3\0\1\77"+
    "\1\101\1\102\10\0\1\102\13\0\1\77\43\0\1\166"+
    "\1\167\2\0\2\167\1\0\1\167\4\0\1\167\2\0"+
    "\2\167\2\0\1\167\4\0\1\167\3\0\1\167\43\0"+
    "\2\101\3\0\1\77\1\0\1\102\10\0\1\102\13\0"+
    "\1\77\43\0\2\170\6\0\1\171\52\0\1\171\12\0"+
    "\10\105\1\0\1\105\2\0\7\105\2\0\21\105\32\0"+
    "\10\105\1\0\1\105\2\0\1\105\1\172\5\105\2\0"+
    "\21\105\32\0\10\11\1\0\1\11\2\0\7\11\2\0"+
    "\3\11\1\173\15\11\32\0\10\11\1\0\1\11\2\0"+
    "\7\11\2\0\1\11\1\174\17\11\32\0\10\11\1\0"+
    "\1\11\2\0\1\11\1\175\5\11\2\0\21\11\32\0"+
    "\10\11\1\0\1\11\2\0\7\11\2\0\1\176\20\11"+
    "\32\0\10\11\1\0\1\11\2\0\1\11\1\177\5\11"+
    "\2\0\21\11\32\0\10\11\1\0\1\11\2\0\1\200"+
    "\6\11\2\0\1\11\1\201\17\11\32\0\10\11\1\0"+
    "\1\11\2\0\7\11\2\0\11\11\1\202\7\11\32\0"+
    "\10\11\1\0\1\11\2\0\4\11\1\203\2\11\2\0"+
    "\21\11\32\0\10\11\1\0\1\11\2\0\4\11\1\204"+
    "\2\11\2\0\21\11\32\0\10\11\1\0\1\11\2\0"+
    "\7\11\2\0\1\11\1\205\17\11\32\0\10\11\1\0"+
    "\1\11\2\0\7\11\2\0\3\11\1\206\15\11\110\0"+
    "\1\207\45\0\1\210\31\0\1\211\21\0\10\11\1\0"+
    "\1\11\2\0\7\11\2\0\3\11\1\212\15\11\32\0"+
    "\10\11\1\0\1\11\2\0\7\11\2\0\2\11\1\213"+
    "\16\11\32\0\10\11\1\0\1\11\2\0\7\11\2\0"+
    "\13\11\1\214\1\215\4\11\32\0\10\11\1\0\1\11"+
    "\2\0\7\11\2\0\1\216\5\11\1\217\12\11\32\0"+
    "\10\11\1\0\1\11\2\0\7\11\2\0\4\11\1\220"+
    "\14\11\32\0\10\11\1\0\1\11\2\0\1\221\6\11"+
    "\2\0\21\11\32\0\10\11\1\0\1\11\2\0\7\11"+
    "\2\0\17\11\1\222\1\11\32\0\10\11\1\0\1\11"+
    "\2\0\6\11\1\223\2\0\21\11\32\0\10\11\1\0"+
    "\1\11\2\0\7\11\2\0\3\11\1\224\7\11\1\225"+
    "\5\11\32\0\10\11\1\0\1\11\2\0\7\11\2\0"+
    "\4\11\1\226\14\11\32\0\10\11\1\0\1\11\2\0"+
    "\7\11\2\0\6\11\1\227\12\11\32\0\10\11\1\0"+
    "\1\11\2\0\7\11\2\0\3\11\1\230\15\11\32\0"+
    "\10\11\1\0\1\11\2\0\1\231\6\11\2\0\21\11"+
    "\32\0\10\11\1\0\1\11\2\0\1\232\2\11\1\233"+
    "\3\11\2\0\21\11\26\0\1\160\2\0\75\160\77\163"+
    "\1\234\6\0\1\166\1\167\1\77\1\0\2\167\1\0"+
    "\1\167\4\0\1\167\1\77\1\0\2\167\2\0\1\167"+
    "\4\0\1\167\3\0\1\167\43\0\2\235\1\77\1\0"+
    "\2\235\1\0\1\235\4\0\1\235\1\77\1\0\2\235"+
    "\2\0\1\235\4\0\1\235\3\0\1\235\43\0\2\170"+
    "\3\0\1\77\26\0\1\77\43\0\2\170\74\0\10\105"+
    "\1\0\1\105\2\0\2\105\1\236\4\105\2\0\21\105"+
    "\32\0\10\11\1\0\1\11\2\0\6\11\1\237\2\0"+
    "\21\11\32\0\10\11\1\0\1\11\2\0\7\11\2\0"+
    "\1\11\1\240\1\11\1\241\15\11\32\0\10\11\1\0"+
    "\1\11\2\0\7\11\2\0\6\11\1\242\12\11\32\0"+
    "\10\11\1\0\1\11\2\0\7\11\2\0\13\11\1\243"+
    "\5\11\32\0\10\11\1\0\1\11\2\0\7\11\2\0"+
    "\4\11\1\244\14\11\32\0\10\11\1\0\1\11\2\0"+
    "\1\245\6\11\2\0\21\11\32\0\10\11\1\0\1\11"+
    "\2\0\7\11\2\0\1\246\20\11\32\0\10\11\1\0"+
    "\1\11\2\0\7\11\2\0\5\11\1\247\13\11\32\0"+
    "\10\11\1\0\1\11\2\0\7\11\2\0\2\11\1\250"+
    "\16\11\32\0\10\11\1\0\1\11\2\0\6\11\1\251"+
    "\2\0\21\11\32\0\10\11\1\0\1\11\2\0\6\11"+
    "\1\252\2\0\21\11\32\0\10\11\1\0\1\11\2\0"+
    "\7\11\2\0\4\11\1\253\14\11\32\0\10\11\1\0"+
    "\1\11\2\0\1\11\1\254\5\11\2\0\21\11\32\0"+
    "\10\11\1\0\1\11\2\0\6\11\1\255\2\0\21\11"+
    "\32\0\10\11\1\0\1\11\2\0\7\11\2\0\3\11"+
    "\1\256\15\11\32\0\10\11\1\0\1\11\2\0\4\11"+
    "\1\257\2\11\2\0\21\11\32\0\10\11\1\0\1\11"+
    "\2\0\7\11\2\0\6\11\1\260\12\11\32\0\10\11"+
    "\1\0\1\11\2\0\7\11\2\0\3\11\1\261\15\11"+
    "\32\0\10\11\1\0\1\11\2\0\6\11\1\262\2\0"+
    "\21\11\32\0\10\11\1\0\1\11\2\0\7\11\2\0"+
    "\1\263\20\11\32\0\10\11\1\0\1\11\2\0\4\11"+
    "\1\264\2\11\2\0\21\11\32\0\10\11\1\0\1\11"+
    "\2\0\1\265\6\11\2\0\21\11\32\0\10\11\1\0"+
    "\1\11\2\0\7\11\2\0\1\266\20\11\32\0\10\11"+
    "\1\0\1\11\2\0\7\11\2\0\4\11\1\267\14\11"+
    "\32\0\10\11\1\0\1\11\2\0\3\11\1\270\3\11"+
    "\2\0\21\11\32\0\10\11\1\0\1\11\2\0\5\11"+
    "\1\271\1\11\2\0\21\11\32\0\10\11\1\0\1\11"+
    "\2\0\7\11\2\0\1\272\20\11\34\0\2\273\1\77"+
    "\1\0\2\273\1\0\1\273\4\0\1\273\1\77\1\0"+
    "\2\273\2\0\1\273\4\0\1\273\3\0\1\273\41\0"+
    "\10\105\1\0\1\105\2\0\3\105\1\274\3\105\2\0"+
    "\21\105\32\0\10\11\1\0\1\11\2\0\7\11\2\0"+
    "\3\11\1\275\15\11\32\0\10\11\1\0\1\11\2\0"+
    "\1\276\6\11\2\0\21\11\32\0\10\11\1\0\1\11"+
    "\2\0\1\11\1\277\5\11\2\0\21\11\32\0\10\11"+
    "\1\0\1\11\2\0\7\11\2\0\13\11\1\300\5\11"+
    "\32\0\10\11\1\0\1\11\2\0\4\11\1\301\2\11"+
    "\2\0\21\11\32\0\10\11\1\0\1\11\2\0\3\11"+
    "\1\302\3\11\2\0\21\11\32\0\10\11\1\0\1\11"+
    "\2\0\7\11\2\0\6\11\1\303\12\11\32\0\10\11"+
    "\1\0\1\11\2\0\6\11\1\304\2\0\21\11\32\0"+
    "\10\11\1\0\1\11\2\0\7\11\2\0\4\11\1\305"+
    "\14\11\32\0\10\11\1\0\1\11\2\0\1\306\6\11"+
    "\2\0\21\11\32\0\10\11\1\0\1\11\2\0\2\11"+
    "\1\307\4\11\2\0\21\11\32\0\10\11\1\0\1\11"+
    "\2\0\7\11\2\0\3\11\1\310\15\11\32\0\10\11"+
    "\1\0\1\11\2\0\2\11\1\311\4\11\2\0\21\11"+
    "\32\0\10\11\1\0\1\11\2\0\5\11\1\312\1\11"+
    "\2\0\21\11\32\0\10\11\1\0\1\11\2\0\7\11"+
    "\2\0\7\11\1\313\11\11\32\0\10\11\1\0\1\11"+
    "\2\0\7\11\2\0\6\11\1\314\12\11\32\0\10\11"+
    "\1\0\1\11\2\0\7\11\2\0\1\11\1\315\17\11"+
    "\32\0\10\11\1\0\1\11\2\0\7\11\2\0\3\11"+
    "\1\316\15\11\32\0\10\11\1\0\1\11\2\0\6\11"+
    "\1\317\2\0\21\11\32\0\10\11\1\0\1\11\2\0"+
    "\7\11\2\0\3\11\1\320\15\11\34\0\2\321\1\77"+
    "\1\0\2\321\1\0\1\321\4\0\1\321\1\77\1\0"+
    "\2\321\2\0\1\321\4\0\1\321\3\0\1\321\41\0"+
    "\10\105\1\0\1\105\2\0\4\105\1\322\2\105\2\0"+
    "\21\105\32\0\10\11\1\0\1\11\2\0\1\11\1\323"+
    "\5\11\2\0\21\11\32\0\10\11\1\0\1\11\2\0"+
    "\1\11\1\324\5\11\2\0\21\11\32\0\10\11\1\0"+
    "\1\11\2\0\3\11\1\325\3\11\2\0\21\11\32\0"+
    "\10\11\1\0\1\11\2\0\6\11\1\326\2\0\21\11"+
    "\32\0\10\11\1\0\1\11\2\0\1\11\1\327\5\11"+
    "\2\0\21\11\32\0\10\11\1\0\1\11\2\0\5\11"+
    "\1\330\1\11\2\0\21\11\32\0\10\11\1\0\1\11"+
    "\2\0\7\11\2\0\11\11\1\331\7\11\32\0\10\11"+
    "\1\0\1\11\2\0\2\11\1\332\4\11\2\0\21\11"+
    "\32\0\10\11\1\0\1\11\2\0\7\11\2\0\3\11"+
    "\1\333\15\11\32\0\10\11\1\0\1\11\2\0\7\11"+
    "\2\0\10\11\1\334\10\11\32\0\10\11\1\0\1\11"+
    "\2\0\6\11\1\335\2\0\21\11\32\0\10\11\1\0"+
    "\1\11\2\0\1\11\1\336\5\11\2\0\21\11\32\0"+
    "\10\11\1\0\1\11\2\0\7\11\2\0\3\11\1\337"+
    "\15\11\32\0\10\11\1\0\1\11\2\0\1\340\6\11"+
    "\2\0\21\11\34\0\2\341\1\77\1\0\2\341\1\0"+
    "\1\341\4\0\1\341\1\77\1\0\2\341\2\0\1\341"+
    "\4\0\1\341\3\0\1\341\41\0\10\105\1\0\1\105"+
    "\2\0\5\105\1\342\1\105\2\0\21\105\32\0\10\11"+
    "\1\0\1\11\2\0\4\11\1\343\2\11\2\0\21\11"+
    "\32\0\10\11\1\0\1\11\2\0\6\11\1\344\2\0"+
    "\21\11\32\0\10\11\1\0\1\11\2\0\7\11\2\0"+
    "\3\11\1\345\15\11\32\0\10\11\1\0\1\11\2\0"+
    "\7\11\2\0\11\11\1\346\7\11\32\0\10\11\1\0"+
    "\1\11\2\0\6\11\1\347\2\0\21\11\32\0\10\11"+
    "\1\0\1\11\2\0\3\11\1\350\3\11\2\0\21\11"+
    "\34\0\2\351\1\77\1\0\2\351\1\0\1\351\4\0"+
    "\1\351\1\77\1\0\2\351\2\0\1\351\4\0\1\351"+
    "\3\0\1\351\41\0\10\105\1\0\1\105\2\0\6\105"+
    "\1\352\2\0\21\105\32\0\10\11\1\0\1\11\2\0"+
    "\6\11\1\353\2\0\21\11\32\0\10\11\1\0\1\11"+
    "\2\0\5\11\1\354\1\11\2\0\21\11\32\0\10\11"+
    "\1\0\1\11\2\0\7\11\2\0\6\11\1\355\12\11"+
    "\32\0\10\11\1\0\1\11\2\0\6\11\1\356\2\0"+
    "\21\11\34\0\2\357\1\77\1\0\2\357\1\0\1\357"+
    "\4\0\1\357\1\77\1\0\2\357\2\0\1\357\4\0"+
    "\1\357\3\0\1\357\40\0\1\360\10\105\1\0\1\105"+
    "\2\0\7\105\2\0\21\105\34\0\2\361\1\77\1\0"+
    "\2\361\1\0\1\361\4\0\1\361\1\77\1\0\2\361"+
    "\2\0\1\361\4\0\1\361\3\0\1\361\40\0\1\360"+
    "\23\0\1\362\56\0\2\363\1\77\1\0\2\363\1\0"+
    "\1\363\4\0\1\363\1\77\1\0\2\363\2\0\1\363"+
    "\4\0\1\363\3\0\1\363\35\0\30\364\1\0\47\364"+
    "\6\0\2\365\1\77\1\0\2\365\1\0\1\365\4\0"+
    "\1\365\1\77\1\0\2\365\2\0\1\365\4\0\1\365"+
    "\3\0\1\365\35\0\30\364\1\366\47\364\6\0\2\367"+
    "\1\77\1\0\2\367\1\0\1\367\4\0\1\367\1\77"+
    "\1\0\2\367\2\0\1\367\4\0\1\367\3\0\1\367"+
    "\43\0\2\370\1\77\1\0\2\370\1\0\1\370\4\0"+
    "\1\370\1\77\1\0\2\370\2\0\1\370\4\0\1\370"+
    "\3\0\1\370\43\0\2\371\1\77\1\0\2\371\1\0"+
    "\1\371\4\0\1\371\1\77\1\0\2\371\2\0\1\371"+
    "\4\0\1\371\3\0\1\371\43\0\2\372\1\77\1\0"+
    "\2\372\1\0\1\372\4\0\1\372\1\77\1\0\2\372"+
    "\2\0\1\372\4\0\1\372\3\0\1\372\43\0\2\373"+
    "\1\77\1\0\2\373\1\0\1\373\4\0\1\373\1\77"+
    "\1\0\2\373\2\0\1\373\4\0\1\373\3\0\1\373"+
    "\43\0\2\374\1\77\1\0\2\374\1\0\1\374\4\0"+
    "\1\374\1\77\1\0\2\374\2\0\1\374\4\0\1\374"+
    "\3\0\1\374\45\0\1\77\12\0\1\77\54\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11456];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\11\30\1"+
    "\10\11\2\1\3\11\7\1\1\11\3\1\2\11\2\1"+
    "\1\11\2\1\1\11\1\0\1\1\1\0\2\11\17\1"+
    "\1\11\1\1\1\11\16\1\13\11\1\1\2\11\1\0"+
    "\2\11\3\1\1\0\15\1\3\11\22\1\1\11\123\1"+
    "\1\0\1\1\4\0\1\11\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  public enum Kind { LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK, SEMICOLON, COMMA, DOT, EQ, GT, LT, NOT, COMP,
                     QUESTION, COLON, EQEQ, LTEQ, GTEQ, NOTEQ, ANDAND, OROR, PLUSPLUS, MINUSMINUS, PLUS, MINUS, 
                     MULT, DIV, AND, OR, XOR, MOD, LSHIFT, RSHIFT, URSHIFT, PLUSEQ, MINUSEQ, MULTEQ, DIVEQ, 
                     ANDEQ, OREQ, XOREQ, MODEQ, LSHIFTEQ, RSHIFTEQ, URSHIFTEQ, ASM, AUTO, BREAK, CASE, CHAR, CONST,
                     CONTINUE, DEFAULT, DO, DOUBLE, ELSE, ENUM, EXTERN, FLOAT, FOR, GOTO, IF, INT, LONG, REGISTER,
                     RETURN, SHORT, SIGNED, SIZEOF, STATIC, STRUCT, SWITCH, TYPEDEF, UNION, UNSIGNED, VOID, VOLATILE, 
                     WHILE, TEXT, EOL, EOF, STRING, STRING_CONT, COMMENT, COMMENT_CONT, PPROC, NUMBER, WHITESP, CHARLIT }

  class Symbol {
    public Kind k;
    public String s;
    public Symbol(Kind k, String s){
      this.k = k;
      this.s = s;
    }
    public String toString(){
      return k.toString()+s;
    }
  }

  private Symbol symbol(Kind k, String s){
    return new Symbol(k,s);
  }
  
  private Symbol symbol(Kind k){
    return new Symbol(k, yytext());
  }
  
  public Symbol next_token() throws java.io.IOException {
    return next_token1();
  }

  StringBuilder string = new StringBuilder();
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CTokens(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CTokens(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private Symbol next_token1() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 72: 
          { return symbol(Kind.VOID);
          }
        case 93: break;
        case 65: 
          { return symbol(Kind.CASE);
          }
        case 94: break;
        case 36: 
          { return symbol(Kind.PPROC);
          }
        case 95: break;
        case 33: 
          { String tmp = string.toString();
                                               string.setLength(0);
                                               return symbol(Kind.COMMENT_CONT, tmp);
          }
        case 96: break;
        case 26: 
          { return symbol(Kind.MULT);
          }
        case 97: break;
        case 78: 
          { return symbol(Kind.WHILE);
          }
        case 98: break;
        case 21: 
          { return symbol(Kind.QUESTION);
          }
        case 99: break;
        case 79: 
          { return symbol(Kind.DOUBLE);
          }
        case 100: break;
        case 48: 
          { return symbol(Kind.OROR);
          }
        case 101: break;
        case 59: 
          { return symbol(Kind.LSHIFTEQ);
          }
        case 102: break;
        case 85: 
          { return symbol(Kind.SWITCH);
          }
        case 103: break;
        case 17: 
          { return symbol(Kind.COMMA);
          }
        case 104: break;
        case 10: 
          { return symbol(Kind.LPAREN);
          }
        case 105: break;
        case 39: 
          { return symbol(Kind.LSHIFT);
          }
        case 106: break;
        case 80: 
          { return symbol(Kind.EXTERN);
          }
        case 107: break;
        case 9: 
          { return symbol(Kind.GT);
          }
        case 108: break;
        case 44: 
          { return symbol(Kind.NOTEQ);
          }
        case 109: break;
        case 57: 
          { yybegin(YYINITIAL); string.append("*/"); return symbol(Kind.COMMENT, string.toString());
          }
        case 110: break;
        case 91: 
          { return symbol(Kind.REGISTER);
          }
        case 111: break;
        case 74: 
          { return symbol(Kind.UNION);
          }
        case 112: break;
        case 18: 
          { return symbol(Kind.EQ);
          }
        case 113: break;
        case 61: 
          { return symbol(Kind.RSHIFTEQ);
          }
        case 114: break;
        case 15: 
          { return symbol(Kind.RBRACK);
          }
        case 115: break;
        case 38: 
          { return symbol(Kind.DO);
          }
        case 116: break;
        case 90: 
          { return symbol(Kind.UNSIGNED);
          }
        case 117: break;
        case 69: 
          { return symbol(Kind.ELSE);
          }
        case 118: break;
        case 8: 
          { return symbol(Kind.LT);
          }
        case 119: break;
        case 31: 
          { String tmp = string.toString();
                                               string.setLength(0);
                                               return symbol(Kind.STRING_CONT, tmp);
          }
        case 120: break;
        case 45: 
          { return symbol(Kind.ANDEQ);
          }
        case 121: break;
        case 56: 
          { return symbol(Kind.MODEQ);
          }
        case 122: break;
        case 42: 
          { return symbol(Kind.GTEQ);
          }
        case 123: break;
        case 75: 
          { return symbol(Kind.SHORT);
          }
        case 124: break;
        case 82: 
          { return symbol(Kind.SIZEOF);
          }
        case 125: break;
        case 63: 
          { return symbol(Kind.FOR);
          }
        case 126: break;
        case 13: 
          { return symbol(Kind.RBRACE);
          }
        case 127: break;
        case 32: 
          { yybegin(YYINITIAL); string.append("\""); return symbol(Kind.STRING, string.toString());
          }
        case 128: break;
        case 24: 
          { return symbol(Kind.OR);
          }
        case 129: break;
        case 14: 
          { return symbol(Kind.LBRACK);
          }
        case 130: break;
        case 84: 
          { return symbol(Kind.STRUCT);
          }
        case 131: break;
        case 73: 
          { return symbol(Kind.CONST);
          }
        case 132: break;
        case 46: 
          { return symbol(Kind.ANDAND);
          }
        case 133: break;
        case 27: 
          { return symbol(Kind.DIV);
          }
        case 134: break;
        case 2: 
          { return symbol(Kind.TEXT);
          }
        case 135: break;
        case 25: 
          { return symbol(Kind.PLUS);
          }
        case 136: break;
        case 34: 
          { return symbol(Kind.MINUSMINUS);
          }
        case 137: break;
        case 49: 
          { return symbol(Kind.PLUSEQ);
          }
        case 138: break;
        case 29: 
          { return symbol(Kind.MOD);
          }
        case 139: break;
        case 50: 
          { return symbol(Kind.PLUSPLUS);
          }
        case 140: break;
        case 86: 
          { return symbol(Kind.RETURN);
          }
        case 141: break;
        case 92: 
          { return symbol(Kind.VOLATILE);
          }
        case 142: break;
        case 43: 
          { return symbol(Kind.EQEQ);
          }
        case 143: break;
        case 62: 
          { return symbol(Kind.ASM);
          }
        case 144: break;
        case 67: 
          { return symbol(Kind.LONG);
          }
        case 145: break;
        case 81: 
          { return symbol(Kind.SIGNED);
          }
        case 146: break;
        case 52: 
          { return symbol(Kind.DIVEQ);
          }
        case 147: break;
        case 12: 
          { return symbol(Kind.LBRACE);
          }
        case 148: break;
        case 37: 
          { return symbol(Kind.IF);
          }
        case 149: break;
        case 89: 
          { return symbol(Kind.CONTINUE);
          }
        case 150: break;
        case 70: 
          { return symbol(Kind.AUTO);
          }
        case 151: break;
        case 83: 
          { return symbol(Kind.STATIC);
          }
        case 152: break;
        case 60: 
          { return symbol(Kind.URSHIFT);
          }
        case 153: break;
        case 54: 
          { return symbol(Kind.COMMENT);
          }
        case 154: break;
        case 68: 
          { return symbol(Kind.ENUM);
          }
        case 155: break;
        case 76: 
          { return symbol(Kind.BREAK);
          }
        case 156: break;
        case 6: 
          { return symbol(Kind.DOT);
          }
        case 157: break;
        case 71: 
          { return symbol(Kind.GOTO);
          }
        case 158: break;
        case 58: 
          { return symbol(Kind.INT);
          }
        case 159: break;
        case 23: 
          { return symbol(Kind.AND);
          }
        case 160: break;
        case 3: 
          { return symbol(Kind.EOL);
          }
        case 161: break;
        case 55: 
          { return symbol(Kind.XOREQ);
          }
        case 162: break;
        case 87: 
          { return symbol(Kind.DEFAULT);
          }
        case 163: break;
        case 19: 
          { return symbol(Kind.NOT);
          }
        case 164: break;
        case 64: 
          { return symbol(Kind.CHARLIT);
          }
        case 165: break;
        case 66: 
          { return symbol(Kind.CHAR);
          }
        case 166: break;
        case 77: 
          { return symbol(Kind.FLOAT);
          }
        case 167: break;
        case 53: 
          { yybegin(COMMENT); string.setLength(0); string.append("/*");
          }
        case 168: break;
        case 4: 
          { return symbol(Kind.WHITESP);
          }
        case 169: break;
        case 7: 
          { return symbol(Kind.MINUS);
          }
        case 170: break;
        case 47: 
          { return symbol(Kind.OREQ);
          }
        case 171: break;
        case 20: 
          { return symbol(Kind.COMP);
          }
        case 172: break;
        case 35: 
          { return symbol(Kind.MINUSEQ);
          }
        case 173: break;
        case 5: 
          { return symbol(Kind.NUMBER);
          }
        case 174: break;
        case 1: 
          { string.append( yytext() );
          }
        case 175: break;
        case 11: 
          { return symbol(Kind.RPAREN);
          }
        case 176: break;
        case 41: 
          { return symbol(Kind.RSHIFT);
          }
        case 177: break;
        case 88: 
          { return symbol(Kind.TYPEDEF);
          }
        case 178: break;
        case 51: 
          { return symbol(Kind.MULTEQ);
          }
        case 179: break;
        case 22: 
          { return symbol(Kind.COLON);
          }
        case 180: break;
        case 16: 
          { return symbol(Kind.SEMICOLON);
          }
        case 181: break;
        case 30: 
          { yybegin(STRING); string.setLength(0); string.append("\"");
          }
        case 182: break;
        case 28: 
          { return symbol(Kind.XOR);
          }
        case 183: break;
        case 40: 
          { return symbol(Kind.LTEQ);
          }
        case 184: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return symbol(Kind.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
